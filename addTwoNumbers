/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode result = dummyHead;
    ListNode p1 = l1;
    ListNode q2 = l2;
    ListNode curr = dummyHead;
    int add = 0;
  //  int count = 0;
  

    while((p1!=null) && (q2!=null) ){
    dummyHead.val = (p1.val + q2.val + add ) % 10;
    add = (p1.val + q2.val + add)/10  ;
    p1 = p1.next;
    q2 = q2.next;
    System.out.println("both " + dummyHead.val);
        
        if (p1!= null || q2!=null){
        dummyHead.next = new ListNode (0);
        dummyHead = dummyHead.next;
    }
    
    }        
        
        
    while((p1!=null) && (q2==null) ){  
    dummyHead.val = (p1.val + add ) % 10;
    add = (p1.val + add)/10  ;
    p1 = p1.next;
        
        
        if(p1 != null || q2 != null){
        dummyHead.next = new ListNode(5);
        dummyHead = dummyHead.next;
        }
        
    }
        
        
        
        
        
     while((p1==null) && (q2!=null) ){  
    dummyHead.val = (q2.val + add ) % 10;
    add = (q2.val + add)/10  ;
    q2 = q2.next;
         
        if(p1 != null || q2 != null){
        dummyHead.next = new ListNode(3);
        dummyHead = dummyHead.next;
        System.out.println("p2next " + dummyHead.val);    
         }
    }
        
        
     if(add == 1){
        dummyHead.next = new ListNode(4);
        dummyHead = dummyHead.next;
        dummyHead.val = 1;
        System.out.println("add " + dummyHead.val);
    }
    
    return result;
    }
}
